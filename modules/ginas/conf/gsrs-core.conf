include "core.conf"


application.context="/ginas/app"
#############################
#
# GSRS MICROSERVICE SETUP
#
#############################

gsrs.microservices{
    #Should we use GSRS based microservices or use the legacy functions
    #if set to false then the code acts like GSRS 2.5
    enabled=false
    #enabled=true
    #url for microservice gateway only used if gsrs.microservices are enabled
    gateway-url="http://localhost:8081"
}
gsrs.dependencies.classname = "ix.ginas.controllers.plugins.GsrsMicroserviceDependencies"
gsrs.textIndexer.serviceFactory="ix.core.search.text.Lucene4IndexServiceFactory"

#####################
#
# CORE START
#
#####################

ix.home="ginas.ix"
ix.app="ginas"

application.router=ix.ginas.Routes
application.appname="ginas"

##### Turn off persistence cache
ix.cache.useFileDb=false



#
# override to use only those models that we need
#
ebean.default ="ix.core.adapters.*,ix.core.models.*,ix.ginas.models.*,ix.ginas.controllers.plugins.*,ix.core.work.*"

application.global=ix.ginas.utils.GinasGlobal

api.version="1.0"
swagger.api.basepath="http://localhost:9000"

#this is a list of relative paths to directories to
# store additional jars to load as external plugins
gsrs.plugins.dir = ["plugins/"]

contexts {
        simple-db-lookups {
                fork-join-executor {
                        parallelism-factor = 10.0
                }
        }
        expensive-db-lookups {
                fork-join-executor {
                        parallelism-max = 4
                }
        }
        db-write-operations {
                fork-join-executor {
                        parallelism-factor = 2.0
                }
        }
        expensive-cpu-operations {
                fork-join-executor {
                        parallelism-max = 2
                }
        }
}

#####################
#
# CORE END
#
#####################


ix.json.typeIdResolvers = [ "ix"]

#################
#
# Persist START
#
#################

# Use this implementation as default
ix.ginas.PersistRecordWorkerFactoryImpl = "ix.core.plugins.SingleThreadedPersistRecordWorkerFactory"

#ix.ginas.PersistRecordWorkerFactoryImpl = "ix.core.plugins.MultiThreadedPersistRecordWorkerFactory"

# Area to store uploaded files
ix.core.files.persist.location="<DB>"
ix.core.files.persist.maxsize="30MB"


# Some loading settings below

#ix.ginas.loader=old
ix.ginas.hazelcast=false

# this needs to be at least 1
ix.ginas.maxrecordqueue=2
ix.ginas.allowloading=true

#extract locators like "[INN]" from names, and add as references
ix.ginas.prepare.extractlocators=false


ix.ginas.batch.validation=true
ix.ginas.batch.persist=true
ix.textindex.enabled=true
ix.textindex.fieldsuggest=true


#################
#
# Persist END
#
#################


#################
#
# Export START
#
#################


# List of ExportFactory classes that can export Substances
# the list of classes is ordered by priority
# if more than one Exporter supports the same file extension,
# the class in the list that supports it fist wins.

ix.ginas.exportFactories = [
			    "ix.ginas.exporters.SdfExporterFactory", 
                            "ix.ginas.exporters.DefaultSubstanceSpreadsheetExporterFactory", 
			    "ix.ginas.exporters.JsonExporterFactory",
			    "ix.ginas.exporters.SPLValidatorXMLExporterFactory"
			]

#################
#
# Export END
#
#################





#####################
#
# API SETTINGS START
#
#####################


#ix.tokenexpiretime=30000

ix.index.deepfields = ["ix.ginas.models.v1.Substance"]

ix.core.resourcefilter="ix.core.PopulatedResourceFilter"

#sets the api request parameter name to override the error code to return
#for example to force an API call that should 404 to return a 500 instead add this to your url "?error_response=500"
#changing this value will change the request parameter name to be something else.
#the default value is "error_response"
#NOTE: even if ix.api.forceErrorCodeValue is set using the ix.api.errorCodeParameter
#request parameter will override the return code for that one request
#NOTE: the only allowed status codes are between [400, 600)
ix.api.errorCodeParameter="error_response"

#uncomment this value to force all API error codes like 404 to be 500 instead even without
#adding the request parameter specified by ix.api.errorCodeParameter.

#ix.api.forceErrorCodeValue=500
ix.api.registeredfunctions=[
        {
                "class":"ix.core.util.pojopointer.extensions.StringLengthRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.InChIRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.InChIFullRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.StringSplitRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.SelectRegisteredFunction"
        },
        {
                "class":"ix.core.util.pojopointer.extensions.StringJoinRegisteredFunction"
        }
]

#####################
#
# API SETTINGS END
#
#####################

##################
#
# Debugging START
#
##################

ix.debug=1
ix.ginas.debug.profile=false
ix.ginas.debug.showheaders=false


#set this to "true" to allow all users (authenticated or not) to behave as admins
ix.admin=false


# For debugging only, adds a delay to each fetch
# for a record
ix.settings.debug.dbdelay=0

# For debugging only, adds a delay to each processing of
# a Structure / Sequence record
ix.settings.debug.processordelay=0

##################
#
# Debugging END
#
##################

##################
#
# Admin START
#
##################

# CUSTOM VALIDATOR - This is not implemented yet
#ix.ginas.validator=ix.ginas.utils.SubstanceValidator

### ADMIN ALL FILES DOWNLOAD PANEL
# paths are relative
admin.panel.download.folderBlackList =["ginas.ix", "lib", "share", "bin"]


# This is the info for the admin contact
# to be used when access is not granted to a user
#
#
#ix.sysadmin={
#"username":"adminusername",
#"email":"display@email.com"
#}


# Loads the user table with the following default users.
# This should be used with caution.

ix.core.users=[
        {
                "username":"admin",
                "email":"",
                "password":"admin",
                "roles":["Query", "DataEntry","SuperDataEntry", "Updater","SuperUpdate", "Approver", "Admin"],
                "groups": ["sysadmin"]
        }
]

##################
#
# Admin END
#
##################

##################
#
# SEARCH UI START
#
##################


# When an unspecified search happens, promote all
# exact matches that match specific fields over
# the rest of the matches. In other words,
# you can prioritize exact matches of "NAME"
# over exact matches of other fields


ix.core.exactsearchfields=[
        {
                "class":"ix.ginas.models.v1.Substance",
                "fields":[
                        "root_names_name",
                        "root_approvalID",
                        "root_codes_CAS"
                ]
        }
]


# Largely defunct now

ix.core.searchanalyzers = [
        {
                "class":"ix.ginas.models.v1.Substance",
                "analyzer":"ix.core.search.ExplicitFieldSubstanceSearchAnalyzer",
                "with":{
                        "maxanalyze":50
                }
        }
]

# Show hierarchy view on browse for substance records
ix.ginas.list.hierarchy.enabled=true

##################
#
# SEARCH UI END
#
##################

##################
#
# FACET UI START
#
##################

#Default number of facet values to load on UI
ix.core.facetValueCount=20


ix.ginas.facets.substance.default=[
        "Deprecated",
	"Substance Class",
        "Molecular Weight",
        "GInAS Tag",
        "ATC Level 1",
        "ATC Level 2",
        "ATC Level 3",
        "ATC Level 4",
#       "Relationships",
        "Code System",
        "Material Type",
        "Family",
        "Parts",
        "Protein Type",
#	"root_approved",
#	"root_lastEdited",
#	"Record Level Access",
#	"Display Name Level Access"
#	"Definition Level Access"

]


ix.ginas.facets.substance.admin=[
        "root_approved"
]

##################
#
# FACET UI END
#
##################

########################
#
# Custom Indexers START
#
########################


# include mixtures in SSS / Similarity searches
ix.ginas.structure.search.includeMixtures=true


# Additional indexing operations can be supplied here
# Below is an example, where the fully qualified class
# name of an IndexValueMaker is specified for Substances.
#
# In order for the facets that it makes to appear in
# the UI by default, they would also have to be added
# as is done below
ix.core.indexValueMakers=[
	{
#		"class":"ix.ginas.models.v1.Substance",
#		"indexer":"ix.ginas.indexers.ExampleValueMaker"

		"class":"ix.ginas.models.v1.Substance",
		"indexer":"ix.ginas.indexers.RecordAccessIndexValueMaker"
	},
	{
		"class":"ix.ginas.models.v1.Substance",
		"indexer": "ix.ginas.indexers.DeprecatedIndexValueMaker"
	},
	{
		"class":"ix.ginas.models.v1.Substance",
		"indexer": "ix.ginas.indexers.BracketTermIndexValueMaker"
	},
        {
                "class":"ix.ginas.models.v1.Substance",
                "indexer": "ix.ginas.indexers.MolecularWeightPropertyIndexValueMaker"
        },
        {
                "class":"ix.ginas.models.v1.Substance",
                "indexer": "ix.ginas.indexers.MixtureLychiIndexValueMaker"
        },
        {
                "class":"ix.ginas.models.v1.Substance",
                "indexer":"ix.ginas.indexers.ATCIndexValueMaker"
        }
]
#
# Explicitly add those facets you'd like to show
##ix.ginas.facets.substance.default+="Simple Ring Count"
##ix.ginas.facets.substance.default+="Carbon Mass Ratio"
#ix.ginas.facets.substance.default+="Moiety Type"
##ix.ginas.facets.substance.default+="Relationship Count"

######################
#
# Custom Indexers END
#
######################  

#####################################
#
# Initializers Scheduled Tasks START
#
#####################################

ix.core.initializers=[
	{
                "class": "ix.ginas.initializers.LoadControlledVocabInitializer",
                "path" : "cv/cv.json"
        },
        {
               #This is important
               "class" : "ix.ginas.initializers.LoadValidatorInitializer"
        },

        {
                "class": "ix.ginas.initializers.LoadDefaultUsersInitializer"
        },
        {
                "class": "ix.ginas.initializers.HierarchyFinderInitializer"
        },
  {
    "class": "ix.ginas.initializers.StructureHasherInitializer"
  },
  {
    "class": "ix.ginas.initializers.ChemkitInitializer"
  },
	{
		"class":"ix.ginas.initializers.ReindexTaskInitializer"
	},
	# schedule a full dump of the data
	{
	    "class":"ix.ginas.initializers.ScheduledExportTaskInitializer",
	    "username":"admin",
	    "cron":"0 9 2 * * ?", #2:09 AM every day
	    "autorun":false,
	    "name":"Full GSRS export"
	},

  {
    "class" : "ix.ginas.initializers.ChronicStackDumper"

    "autorun": false,
    "dateFormat" : "yyyy.MMMM.dd hh:mm:ss a", #any valid Java 8 DateTimeFormatter

    "cron":"0 0/3 * * * ?", #every 3 mins

    "output.path" : "logs/all-running-stacktraces.log"
	},
  {
    "class" : "ix.ginas.initializers.DataRecorder"

    "autorun": false,
    "dateFormat" : "yyyy.MMMM.dd hh:mm:ss a", #any valid Java 8 DateTimeFormatter

		"cron":"0/10 * * * * ?", #every 10 seconds

    "output.path" : "logs/datarecorder.log"
  },
  {
    "class" : "ix.ginas.initializers.ResaveBackupsTaskInitializer",
    "autorun": false,
    "entityClass":"ix.ginas.models.v1.Substance"
  },
  {
    "class" : "ix.ginas.initializers.ResaveBackupsTaskInitializer",
    "autorun": false,
    "entityClass":"ix.ginas.models.v1.ControlledVocabulary"
  },
  {
    "class" : "ix.ginas.initializers.StructureRecalcTaskInitializer",
    "autorun": false
  }
  
]

#####################################
#
# Initializers Scheduled Tasks END
#
#####################################



#####################################
#
# TRIGGERS / PROCESSING START
#
#####################################


ix.core.entityprocessors=[
	# this ensures consistency across alternative definitions
	# also use by FDA. FDA modifies this class
	{
		"class":"ix.ginas.models.v1.Substance",
		"processor":"ix.ginas.processors.SubstanceProcessor"
	},
	{
		"class":"ix.ginas.models.v1.Substance",
		"processor":"ix.ginas.processors.PublicCleanProcessor"
	},
	#{
	#	"class":"ix.ginas.models.v1.Substance",
	#	"processor":"ix.ginas.processors.NewFastaFileReferenceProcessor"
	#},

	#{
    #	"class":"ix.ginas.models.v1.Substance",
	#	"processor":"ix.ginas.processors.LegacyAuditInfoProcessor"
	#},
	{
                "class":"ix.ginas.models.v1.Substance",
		"processor":"ix.ginas.processors.PublicTagFlagger"
	},
	{
		"class":"ix.ginas.models.v1.Relationship",
		"processor":"ix.ginas.processors.RelationshipProcessor"
	},
  {
    "class":"ix.ginas.models.v1.Reference",
    "processor": "ix.ginas.processors.ReferenceProcessor"
  },
    # GenerateURLs for codes if need be
    #{
    #            "class":"ix.ginas.models.v1.Code",
    #            "processor":"ix.ginas.processors.CodeProcessor"
    #},

	# when a new group is added, this ensures that new group is added to controlled vocabulary
	{
		"class":"ix.core.models.Group",
		"processor":"ix.ginas.processors.GroupProcessor"
	},
	# when a new controlled vocabulary added, it ensures adding a new group
	{
		"class":"ix.ginas.models.v1.ControlledVocabulary",
		"processor":"ix.ginas.processors.CVProcessor"
	},
	# when updating a user profile, this class ensures to update the token
	{
		"class":"ix.core.models.UserProfile",
		"processor":"ix.ncats.processors.UserProfileProcessor"
	}
	//
]

ix.codeSystemUrlGenerator {
  class : "ix.ginas.datasource.DefaultCodeSystemUrlGenerator",

  json: {
    "filename": "codeSystem.json",
  }

}
  #####################################
  #
  # TRIGGERS / PROCESSING END
  #
  #####################################

  #######################
  #
  # AUTHENTICATION START
  #
  #######################

  # SSO HTTP proxy authentication settings - right now this is only used by FDA
  #ix.authentication.trustheader=true
  #ix.authentication.usernameheader="AUTHENTICATION_HEADER_NAME"
  #ix.authentication.useremailheader="AUTHENTICATION_HEADER_NAME_EMAIL"

  # set this "false" to only allow authenticated users to see the application
  ix.authentication.allownonauthenticated=true

  # set this "true" to allow any user that authenticates to be registered
  # as a user automatically
  ix.authentication.autoregister=true

  #Set this to "true" to allow autoregistered users to be active as well
  ix.authentication.autoregisteractive=false

  #######################
  #
  # AUTHENTICATION END
  #
  #######################

  #######################
  #
  # BASIC UI START
  #
  #######################

  # This is the default order
  # to present substance codes

  ix.ginas.codes.order=[
    "BDNUM",
    "CAS",
    "WHO-ATC",
    "EVMPD",
    "NCI"
  ]

  #######################
  #
  # BASIC UI END
  #
  #######################


  #######################
  #
  # DATABASE SETUP START
  #
  #######################


  ################
  #H2 example
  db.default.driver=org.h2.Driver
  db.default.url="jdbc:h2:"${ix.home}"/h2/ginas;MVCC=true"
  db.default.user=sa
  db.default.password=""
  db.default.maximumPoolSize = 50
  #END H2 example
  ################


  #evolutionplugin=disabled

  #This is for testing
  #ebean.default2="ix.test.modelsb.*"
  ################
  #H2 example
  #db.default2.driver=org.h2.Driver
  #db.default2.url="jdbc:h2:"${ix.home}"/h2/ginas;MVCC=true"
  #db.default2.user=sa
  #db.default2.password=""
  #END H2 example
  ################

  #######################
  #
  # DATABASE SETUP END
  #
  #######################




  #######################
  #
  # VALIDATORS START
  #
  #######################


substance.validators = [
  # public Class validatorClass;
  #  public Class substanceClass;
  #  public Substance.SubstanceDefinitionType type;

  {
    "validatorClass" = "ix.ginas.utils.validation.validators.IgnoreValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.NullCheckValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.AutoGenerateUuidIfNeeded",
    "newObjClass" = "ix.ginas.models.v1.Substance",
  },
  {
    #validates that any structural modifications are effectively non-null
    "validatorClass" = "ix.ginas.utils.validation.validators.StructuralModificationsValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.SubstanceStatusValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.RemovePublicIndReferences",
    "newObjClass" = "ix.ginas.models.v1.Substance",
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.NamesValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "type" = "PRIMARY"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.CodesValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "type" = "PRIMARY"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.PrimaryRelationshipsValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "type" = "PRIMARY"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.NotesValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "type" = "PRIMARY"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.PrimaryDefinitionValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "type" = "PRIMARY"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.AlternateDefinitionValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "type" = "ALTERNATIVE"
  },

  {
    "validatorClass" = "ix.ginas.utils.validation.validators.ChemicalValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "chemical"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.MixtureValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "mixture"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.NucleicAcidValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "nucleicAcid"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.PolymerValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "polymer"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.ProteinValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "protein"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.StructurallyDiverseValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "structurallyDiverse"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.SSSG1Validator",
    "newObjClass" = "ix.ginas.models.v1.Substance",
    "substanceClass" = "specifiedSubstanceG1"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.UnknownSubstanceClassValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance"
  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.NewSubstanceNonBatchLoadValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",

  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.UpdateSubstanceNonBatchLoaderValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance",

  },
  {
    "validatorClass" = "ix.ginas.utils.validation.validators.PublicDomainRefValidator",
    "newObjClass" = "ix.ginas.models.v1.Substance"
  },
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.DefinitionalHashValidator",
          "newObjClass" = "ix.ginas.models.v1.Substance"
        },
        {
         "validatorClass" = "ix.ginas.utils.validation.validators.SuperatomValidator",
        "newObjClass" = "ix.ginas.models.v1.Substance",
        "substanceClass" = "chemical"

        }
]

  #######################
  #
  # VALIDATORS END
  #
  #######################

  #######################
  #
  # HIERARCHY START
  #
  #######################
substance.hierarchyFinders=[
        {
        "relationship" = "ACTIVE MOIETY",
        "renameChildLambda" = """ (p,c)->"HAS ACTIVE MOIETY:\"" + p.getName() + "\"" """
        },
        {
        "relationship" = "SALT/SOLVATE->PARENT",
        "invertible" = true,
        "renameChildTo" = "IS SALT/SOLVATE OF"
        },
         {
        "relationship" = "SUB_CONCEPT->SUBSTANCE",
        "invertible" = true,
        "renameChildTo" = "IS SUBCONCEPT OF"
        },

]

#################
#  LOOPBACK WEB REQUESTS
#################
gsrs.loopback.hostname="localhost"
gsrs.loopback.protocol="http"
#default port
gsrs.loopback.port=9000
#this is an optional override if user sets -Dhttp.port this set the gsrs.loopback.port to that value
gsrs.loopback.port=${?http.port}
gsrs.loopback.requests=[
{
"isDefault" = true,
"classname" ="ix.core.plugins.LoopbackWebRequestPlugin$AuthHeaderRequestAdapter",
"parameters" = {
                "authHeaders" = ["auth-token", "auth-username", "auth-password", "Cookie"]
               }
}
]

  #######################
  #
  # HIERARCHY END
  #
  #######################

  #######################
  #
  # MISC START
  #
  #######################

  # You can specify the path to an additional mapping file to make
  # certain keys resolve as if they were other keys (e.g. old codes)

  # The expected file format is a header-less 2-column tab-delimitted
  # file. The first column is the key you want to map, and the second
  # column is the key you want to map to. This will only be used during
  # url resolving, and only when there are no matches with the standard
  # ways that keys are resolved (using database lookups)

  #ix.ginas.mapping.synonymsFile="./olduuidmapping.txt"

  #######################
  #
  # MISC END
  #
  #######################




